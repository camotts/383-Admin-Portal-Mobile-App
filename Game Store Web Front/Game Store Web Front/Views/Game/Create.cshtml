@model Game_Store_Web_Front.Models.Game

@{
    ViewBag.Title = "Create";
}



<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <form>
    <div class="form-horizontal">
        <h4>Game</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.GameName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GameName, new { htmlAttributes = new { @class = "form-control", @id="gameName"} })
                @Html.ValidationMessageFor(model => model.GameName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "form-control datepicker", @id="releaseDate" } })
                @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" }, @id="price" })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InventoryStock, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.InventoryStock, new { htmlAttributes = new { @class = "form-control", @id="inventoryStock" } })
                @Html.ValidationMessageFor(model => model.InventoryStock, "", new { @class = "text-danger" })
            </div>
        </div>

       

        <div class="container" style="margin-top:20px;">
            <div class="row">
                <div class="col-xs-6">
                    <h3 class="text-center">Genres</h3>
                    <div class="well" style="max-height: 300px;overflow: auto;">
                        <ul id="check-list-box-genres"  class="list-group checked-list-box">
                            @foreach (Game_Store_Web_Front.Models.Genre genre in ViewBag.genres)
                            {
                                <li class="list-group-item" id="genre-@genre.Id">@genre.Name</li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="col-xs-6">
                    <h3 class="text-center">Tags</h3>
                    <div class="well" style="max-height: 300px;overflow: auto;">
                        <ul id="check-list-box-tags" class="list-group checked-list-box">
                            @foreach (Game_Store_Web_Front.Models.Tag tag in ViewBag.tags)
                            {
                                <li class="list-group-item" id="genre-@tag.Id">@tag.Name</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Create" class="btn btn-default" onclick="sendInput();"/>
            </div>
        </div>
    </div>
 </form>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    $(function () {
        $('.datepicker').datepicker();
    });
    var createGame = {};
    function sendInput() {
        var tags = getCheckedTags();
        var genres = getCheckedGenres();


        console.log(tags);
        console.log(genres);

        var gameName = "test";
        var releaseDate = "test";
        var price = "1";
        var inventoryCount = "1";
        
        //createGame.Id = "1";
        createGame.GameName = $('#gameName').val();;
        createGame.ReleaseDate = $('#releaseDate').val();
        createGame.Price = $('#price').val();
        createGame.InventoryStock = $('#inventoryStock').val();
        createGame.Genres = genres;
        createGame.Tags = tags;

        console.debug(createGame);

        $.ajax({
            contentType: 'application/json',
            type: 'POST',
            url: '/Game/Create',
            data: JSON.stringify(createGame),
            success: function (data) {
                console.log("GOT IT");
                window.location.href = data.Url
            },
            error: function () {
                console.trace();
            }
        });

    }

    function getCheckedTags() {
        var checkedItems = [], counter = 0;
        $("#check-list-box-tags li.active").each(function (idx, li) {
            var split = $(li).attr('id').split('-')
            checkedItems.push({ Name: $(li).text(), Id: split[split.length - 1] })
            counter++;
        });
        return checkedItems;
    }
    function getCheckedGenres() {
        var checkedItems = [], counter = 0;
        $("#check-list-box-genres li.active").each(function (idx, li) {
            var split = $(li).attr('id').split('-')
            checkedItems.push({Name:$(li).text(), Id:split[split.length-1]})
            counter++;
        });
        return checkedItems;
    }
</script>
